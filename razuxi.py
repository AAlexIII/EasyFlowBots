import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import pandas as pd

bot = telebot.TeleBot('1181885362:AAHGMG3zg3KWfPWOuX1xSVgbzreiSAZ5WSs')
redactor = str('9b2398&DC8b0e')
no_value = str('dc34srefi*b23')


def make_keyboard(d: dict):
    keyboard = InlineKeyboardMarkup(row_width=1)
    for name, call in d.items():
        keyboard.add(InlineKeyboardButton(name, callback_data=call))
    return keyboard


def menu(who):
    start_menu = {'–ü–æ–¥–∞—Ç—å —Ä–∞—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ': '–ø–æ–¥–∞—á–∞',
                  '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å': "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": '–æ—Ü–µ–Ω–∫–∞–ª–∞–π—Ç'}
    bot.send_message(who, "–í—ã–±–∏—Ä–µ—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=make_keyboard(start_menu))


def make_keyboard_2(type=0):
    keyboard = InlineKeyboardMarkup()
    if type == 1:
        keyboard.add(InlineKeyboardButton('üëçüèª', callback_data='like'),
                     InlineKeyboardButton('üëéüèª', callback_data='dislike'))
    keyboard.add(InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data='endlook'))
    return keyboard


def prover(who):
    time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
    status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
    bot.send_message(who, '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö:')
    name = status.loc[status['id'] == who]['–§–∞–º–∏–ª–∏—è'].values[0]
    num = status.loc[status['id'] == who]['–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä'].values[0]
    blok = time.loc[time['id'] == who]['–ö—É–¥–∞'].values[0]
    problem = time.loc[time['id'] == who]['–ü—Ä–æ–±–ª–µ–º–∞'].values[0]
    idea = time.loc[time['id'] == who]['–ò–¥–µ—è'].values[0]
    chek = f'\033[1m –§–∞–º–∏–ª–∏—è: \033[0m{name}\n\033[1m–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: \033[0m{num}\n\033[1m–ë–ª–æ–∫: \033[0m{blok}\n\033[1m–ü—Ä–æ–±–ª–µ–º–∞: \033[0m{problem}\n\033[1m–†–µ—à–µ–Ω–∏–µ: \033[0m{idea}'
    bot.send_message(who, chek)
    end = {'–î–∞': 'end', '–ù–µ—Ç': 'notend'}
    bot.send_message(who, '–í—Å—ë –ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –≤–µ—Ä–Ω–æ?', reply_markup=make_keyboard(end))


def show_res(mes, who):
    status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
    data = pd.read_csv('data_base.csv', sep=';', header=[0], encoding='cp1251')
    which = status.loc[status['id'] == who]['–°—Ç–∞—Ç—É—Å'].values[0]
    if which == len(data):
        q = 0
        s = '–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.'
    else:
        l = ['\033[1m–§–∞–º–∏–ª–∏—è: \033[0m', '\033[1m–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: \033[0m', '\033[1m–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \033[0m', '\033[1m–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: \033[0m',
             '\033[1m–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–µ—à–µ–Ω–∏—é: \033[0m']
        s = ''
        for index, row in data.iterrows():
            if index == which:
                s += str(index) + ' –∏–∑ ' + str(len(data)-1) + '\n' + l[0] + str(row['–§–∞–º–∏–ª–∏—è']) + '\n' + l[1] + str(
                    row['–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä']) + '\n' + l[2] + str(row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']) + '\n' + l[3] + str(
                    row['–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã']) + '\n' + l[4] + str(row['–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–µ—à–µ–Ω–∏—é']) + '\n\n'
        q = 1
    bot.edit_message_text(s, chat_id=who,
                          message_id=mes, reply_markup=make_keyboard_2(type=q))


@bot.callback_query_handler(func=lambda call: True)
def reaction(call):
    c = call.data
    who = call.message.chat.id
    mes = call.message.message_id
    if c == '–ø–æ–¥–∞—á–∞ —Ñ–∞—Å—Ç':
        status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        time = time.loc[time['id'] != who]
        blok = status.loc[status['id'] == who]['–†–æ–¥–Ω–æ–π –ë–ª–æ–∫'].values[0]
        time.loc[len(time)] = [int(who), blok, no_value, no_value]
        time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
        # bot.send_message(who, '–ï–≥–æ—Ä –° –î–† üéäüéâ')
        bot.edit_message_text('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', chat_id=who, message_id=mes)
    elif c == '–ø–æ–¥–∞—á–∞':
        # Todo: –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
        blocks = {
            '–ó–∞–∫—É–ø–∫–∏ –ú–¢–†': '0–ó–∞–∫—É–ø–∫–∏ –ú–¢–†',
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π': '0–£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π',
            '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞': '0–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞',
            '–õ–æ–≥–∏—Å—Ç–∏–∫–∞': '0–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
            '–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': '0–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
            '–û—Ä–≥. –≤–æ–ø—Ä–æ—Å—ã (HR)': '0–û—Ä–≥. –≤–æ–ø—Ä–æ—Å—ã',
            '–ü—Ä–∞–≤–æ–≤—ã–µ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã': '0–ü—Ä–∞–≤–æ–≤—ã–µ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
            '–°–£–û–î': '0–°–£–û–î',
            '–ü–≠–ë, –û–¢ –∏ –ì–ó': '0–ü–≠–ë, –û–¢ –∏ –ì–ó',
            '–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞': '0–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞',
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ú–¢–†': '0–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ú–¢–†',
            '–ë–≠–§': '0–ë–≠–§'
        }
        # bot.send_message(who, '–ö–æ–º—É –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ä–∞—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?', reply_markup=make_keyboard(
        # blocks))
        bot.edit_message_text('–ö–æ–º—É –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ —Ä–∞—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?', chat_id=who,
                              message_id=mes, reply_markup=make_keyboard(blocks))
    elif c == '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã':
        l = ['\033[1m–§–∞–º–∏–ª–∏—è: \033[0m', '\033[1m–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: \033[0m',
             '\033[1m–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: \033[0m', '\033[1m–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: \033[0m',
             '\033[1m–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–µ—à–µ–Ω–∏—é: \033[0m', '\033[1m–ó–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ: \033[0m',
             '\033[1m–ü—Ä–æ—Ç–∏–≤ –ø—Ä–∏–Ω—è—Ç–∏—è: \033[0m']
        status = pd.read_csv('data_base.csv', sep=';', header=[0], encoding='cp1251')
        s = ''
        for index, row in status.iterrows():
            if index != 0:
                s += l[0] + str(row['–§–∞–º–∏–ª–∏—è']) + '\n' + l[1] + str(row['–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä']) + '\n' + l[2] + str(
                    row['–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ']) + '\n' + l[3] + str(row['–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã']) + '\n' + l[4] + str(
                    row['–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–µ—à–µ–Ω–∏—é']) + '\n' + l[5] + str(row['–ó–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ']) + '\n' + l[6] + str(
                    row['–ü—Ä–æ—Ç–∏–≤ –ø—Ä–∏–Ω—è—Ç–∏—è']) + '\n\n'

        bot.answer_callback_query(call.id)
        bot.send_message(who, s)
        menu(who)
    elif c == '–æ—Ü–µ–Ω–∫–∞–ª–∞–π—Ç':
        bot.answer_callback_query(call.id)
        show_res(mes, who)
    elif c[0] == '0':  # –≤—ã–±–æ—Ä –±–ª–æ–∫–∞
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        time = time.loc[time['id'] != who]
        time.loc[len(time)] = [int(who), c[1:], no_value, no_value]
        time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
        # bot.send_message(who, '–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:')
        bot.edit_message_text('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', chat_id=who,
                              message_id=mes)
    elif c[0] == '1':  # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        time.loc[time['id'] == who, '–ö—É–¥–∞'] = c[1:]
        time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
        prover(who)
    elif c == 'ideaY':  # –∏–¥–µ–∏ —Ä–µ—à–µ–Ω–∏—è –µ—Å—Ç—å
        # bot.send_message(who, '–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–µ—à–µ–Ω–∏—é –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:')
        bot.edit_message_text('–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:', chat_id=who,
                              message_id=mes)
    elif c == 'ideaN':  # –∏–¥–µ–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–µ—Ç
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        time.loc[time['id'] == who, '–ò–¥–µ—è'] = '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç'
        time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
        prover(who)
    elif c == 'end':  # –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        end = pd.read_csv('data_base.csv', sep=';', header=[0], encoding='cp1251')
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
        name = status.loc[status['id'] == who]['–§–∞–º–∏–ª–∏—è'].values[0]
        num = status.loc[status['id'] == who]['–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä'].values[0]
        blok = time.loc[time['id'] == who]['–ö—É–¥–∞'].values[0]
        problem = time.loc[time['id'] == who]['–ü—Ä–æ–±–ª–µ–º–∞'].values[0]
        idea = time.loc[time['id'] == who]['–ò–¥–µ—è'].values[0]
        end.loc[len(end)] = [name, int(num), blok, problem, idea, int(0), int(0)]
        end.to_csv('data_base.csv', sep=';', index=False, encoding='cp1251')
        # time = time.drop(pd.where(time['id'] == who)[0])
        time = time.loc[time['id'] != who]
        time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
        #start_menu = {'–ü–æ–¥–∞—Ç—å –†–ê–¶ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ': '–ø–æ–¥–∞—á–∞',
        #             '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å': "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": '–æ—Ü–µ–Ω–∫–∞–ª–∞–π—Ç'}
        # bot.send_message(who, '–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ', reply_markup=make_keyboard(start_menu))
        bot.edit_message_text('–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ', chat_id=who,
                              message_id=mes)
        menu(who)

    elif c == 'notend':  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é
        change = {'–ü—Ä–æ–±–ª–µ–º–∞': '–ø—Ä–æ–±–ª–µ–º–∞', '–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã': '—Ä–µ—à–µ–Ω–∏–µ', '–ë–ª–æ–∫': 'workplace',
                  '–§–∞–º–∏–ª–∏—è (—Å–±—Ä–æ—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç)': '—Ñ–∞–º–∏–ª–∏—è', '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä': '—Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä'}
        # bot.send_message(who, '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=make_keyboard(change))
        bot.edit_message_text('–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?', chat_id=who,
                              message_id=mes, reply_markup=make_keyboard(change))
    elif c == 'workplace':  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ –ø–æ–¥–∞—á–∏
        blocks = {
            '–ó–∞–∫—É–ø–∫–∏ –ú–¢–†': '1–ó–∞–∫—É–ø–∫–∏ –ú–¢–†',
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π': '1–£–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π',
            '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞': '1–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞',
            '–õ–æ–≥–∏—Å—Ç–∏–∫–∞': '1–õ–æ–≥–∏—Å—Ç–∏–∫–∞',
            '–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞': '1–û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞',
            '–û—Ä–≥. –≤–æ–ø—Ä–æ—Å—ã (HR)': '–û—Ä–≥. –≤–æ–ø—Ä–æ—Å—ã',
            '–ü—Ä–∞–≤–æ–≤—ã–µ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã': '1–ü—Ä–∞–≤–æ–≤—ã–µ –∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã',
            '–°–£–û–î': '1–°–£–û–î',
            '–ü–≠–ë, –û–¢ –∏ –ì–ó': '1–ü–≠–ë, –û–¢ –∏ –ì–ó',
            '–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞': '1–†–∞–∑–≤–∏—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞',
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ú–¢–†': '1–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –ú–¢–†',
            '–ë–≠–§': '1–ë–≠–§'
        }
        # bot.send_message(who, "–í—ã–±–∏—Ä–µ—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥–∞—á–∏", reply_markup=make_keyboard(blocks))
        bot.edit_message_text("–í—ã–±–∏—Ä–µ—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ –ø–æ–¥–∞—á–∏", chat_id=who,
                              message_id=mes, reply_markup=make_keyboard(blocks))
    elif c == '—Ä–µ—à–µ–Ω–∏–µ':  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        time.loc[time['id'] == who, '–ò–¥–µ—è'] = redactor
        time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
        # bot.send_message(who, "–û–ø–∏—à–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        bot.edit_message_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏", chat_id=who, message_id=mes)
    elif c == '–ø—Ä–æ–±–ª–µ–º–∞':  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        time.loc[time['id'] == who, '–ü—Ä–æ–±–ª–µ–º–∞'] = redactor
        time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
        # bot.send_message(who, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
        bot.edit_message_text("–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏", chat_id=who, message_id=mes)
    elif c == '—Ñ–∞–º–∏–ª–∏—è':  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bot.send_message(who, '–ù–∞–∑–æ–≤–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
        status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
        status = status.loc[status['id'] != who]
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        time = time.loc[time['id'] != who]
        status.to_csv('files/status.csv', sep=';', index=False, encoding='cp1251')
        time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')

    elif c == '—Ç–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä':  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        bot.send_message(who, '–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø—Ä—è–º—É—é —Å–≤—è–∑–∞–Ω —Å —Ñ–∞–º–∏–ª–∏–µ–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∏ '
                              '–≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ—à–∏—Ç '
                              '–ø—Ä–æ–±–ª–µ–º—É –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å @gasadaser')
        prover(who)
    # –æ—Ü–µ–Ω–∫–∞
    elif c == "like":
        bot.answer_callback_query(call.id)
        data = pd.read_csv('data_base.csv', sep=';', header=[0], encoding='cp1251')
        status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
        index = status.loc[status['id'] == who]['–°—Ç–∞—Ç—É—Å'].values[0]
        data.at[index, '–ó–∞ –ø—Ä–∏–Ω—è—Ç–∏–µ'] += 1
        status.loc[status['id'] == who, '–°—Ç–∞—Ç—É—Å'] += 1
        data.to_csv('data_base.csv', sep=';', index=False, encoding='cp1251')
        status.to_csv('files/status.csv', sep=';', index=False, encoding='cp1251')
        show_res(mes, who)

    elif c == 'dislike':
        bot.answer_callback_query(call.id)
        data = pd.read_csv('data_base.csv', sep=';', header=[0], encoding='cp1251')
        status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
        index = status.loc[status['id'] == who]['–°—Ç–∞—Ç—É—Å'].values[0]
        data.at[index, '–ü—Ä–æ—Ç–∏–≤ –ø—Ä–∏–Ω—è—Ç–∏—è'] += 1
        status.loc[status['id'] == who, '–°—Ç–∞—Ç—É—Å'] += 1
        data.to_csv('data_base.csv', sep=';', index=False, encoding='cp1251')
        status.to_csv('files/status.csv', sep=';', index=False, encoding='cp1251')
        bot.answer_callback_query(call.id)
        show_res(mes, who)

    elif c == 'next':
        status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
        status.loc[status['id'] == who, '–°—Ç–∞—Ç—É—Å'] += 1
        status.to_csv('files/status.csv', sep=';', index=False, encoding='cp1251')
        bot.answer_callback_query(call.id)
        show_res(mes, who)

    elif c == 'last':
        status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
        if status.loc[status['id'] == who]['–°—Ç–∞—Ç—É—Å'].values[0] > 0:
            status.loc[status['id'] == who, '–°—Ç–∞—Ç—É—Å'] -= 1
        status.to_csv('files/status.csv', sep=';', index=False, encoding='cp1251')
        bot.answer_callback_query(call.id)
        show_res(mes, who)

    elif c == 'endlook':
        bot.answer_callback_query(call.id)
        menu(who)


@bot.message_handler(commands=['start'])
def start(message):
    who = message.chat.id
    status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
    start_menu = {'–ü–æ–¥–∞—Ç—å —Ä–∞—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ': '–ø–æ–¥–∞—á–∞',
                  '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å': "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": '–æ—Ü–µ–Ω–∫–∞–ª–∞–π—Ç'}
    if who not in status['id'].values:
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é')
    else:
        f = status.loc[status['id'] == who]['–§–∞–º–∏–ª–∏—è'].values[0]
        bot.send_message(who, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {f}", reply_markup=make_keyboard(start_menu))


@bot.message_handler(content_types=['text'])
def send_mes(message):
    t = message.text
    who = message.chat.id
    status = pd.read_csv('files/status.csv', sep=';', header=[0], encoding='cp1251')
    start_menu = {'–ü–æ–¥–∞—Ç—å —Ä–∞—Ü. –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ': '–ø–æ–¥–∞—á–∞',
                  '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å': "—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", "–û—Ü–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è": '–æ—Ü–µ–Ω–∫–∞–ª–∞–π—Ç'}
    # Todo: –≤–æ–∑–º–æ–∂–Ω–æc—Ç—å –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ –∑–Ω–∞—á–µ–Ω–∏—è
    # Todo: –§–∞–º–∏–ª–∏—è –∏ –∏–º—è
    if who not in status['id'].values:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∏–ª–∏ –Ω–µ—Ç
        status.loc[len(status)] = [int(who), t,
                                   ' ',
                                   123,
                                   "–î–æ–º", 1]
        status.to_csv('files/status.csv', sep=';', index=False, encoding='cp1251')
        bot.send_message(who, f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é {t}, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=make_keyboard(start_menu))

    else:
        time = pd.read_csv('files/time.csv', sep=';', header=[0], encoding='cp1251')
        if who in time['id'].values:
            if time.loc[time['id'] == who]['–ü—Ä–æ–±–ª–µ–º–∞'].values[0] == redactor:
                time.loc[time['id'] == who, '–ü—Ä–æ–±–ª–µ–º–∞'] = t
                time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
                prover(who)
            elif time.loc[time['id'] == who]['–ò–¥–µ—è'].values[0] == redactor:
                time.loc[time['id'] == who, '–ò–¥–µ—è'] = t
                time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
                prover(who)
            elif time.loc[time['id'] == who]['–ü—Ä–æ–±–ª–µ–º–∞'].values[0] == no_value:
                time.loc[time['id'] == who, '–ü—Ä–æ–±–ª–µ–º–∞'] = t
                time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
                yes_no = {'–î–∞': 'ideaY', '–ù–µ—Ç': 'ideaN'}
                bot.send_message(who, '–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã?',
                                 reply_markup=make_keyboard(yes_no))
            elif time.loc[time['id'] == who]['–ò–¥–µ—è'].values[0] == no_value:
                # –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–¥–µ—é
                time.loc[time['id'] == who, '–ò–¥–µ—è'] = t
                time.to_csv('files/time.csv', sep=';', index=False, encoding='cp1251')
                prover(who)
        else:
            bot.send_message(who, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=make_keyboard(start_menu))


# Todo: –Ω–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ä–∞–∑—É

print('go')
bot.polling(none_stop=True)
